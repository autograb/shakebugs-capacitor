import { WebPlugin } from '@capacitor/core';
import type { CapacitorShakePlugin, ChatNotification, LogOptions, NetworkRequest, NotificationEvent, RegisterUserOptions, ShakeBaseAction, ShakeFile, ShakeForm, ShakeReportConfiguration, ShakeScreen, ShakeStartOptions, ShakeTheme } from './definitions';
export declare class CapacitorShakeWeb extends WebPlugin implements CapacitorShakePlugin {
    start(_options: ShakeStartOptions): Promise<void>;
    show(_shakeScreen: ShakeScreen): void;
    getShakeForm(): ShakeForm;
    setShakeForm(_shakeForm: ShakeForm): void;
    setShakeTheme(_shakeTheme: ShakeTheme): void;
    setHomeSubtitle(_subtitle: string): void;
    setHomeActions(_actions: ShakeBaseAction[]): void;
    isUserFeedbackEnabled(): boolean;
    setUserFeedbackEnabled(_enabled: boolean): void;
    isEnableBlackBox(): boolean;
    setEnableBlackBox(_enabled: boolean): void;
    isEnableActivityHistory(): boolean;
    setEnableActivityHistory(_enabled: boolean): void;
    isShowFloatingReportButton(): boolean;
    setShowFloatingReportButton(_enabled: boolean): void;
    isInvokeShakeOnShakeDeviceEvent(): boolean;
    setInvokeShakeOnShakeDeviceEvent(_enabled: boolean): void;
    isInvokeShakeOnScreenshot(): boolean;
    setInvokeShakeOnScreenshot(_enabled: boolean): void;
    getDefaultScreen(): ShakeScreen;
    setDefaultScreen(_shakeScreen: ShakeScreen): void;
    isScreenshotIncluded(): boolean;
    setScreenshotIncluded(_enabled: boolean): void;
    getShakingThreshold(): number;
    setShakingThreshold(_threshold: number): void;
    getShowIntroMessage(): boolean;
    setShowIntroMessage(_show: boolean): void;
    isAutoVideoRecording(): boolean;
    setAutoVideoRecording(_enabled: boolean): void;
    isConsoleLogsEnabled(): boolean;
    setConsoleLogsEnabled(_enabled: boolean): void;
    log(_options: LogOptions): void;
    setMetadata(_key: string, _value: string): void;
    clearMetadata(): void;
    setShakeReportData(_files: ShakeFile[]): void;
    silentReport(_description: string, _files: ShakeFile[], _configuration: ShakeReportConfiguration): void;
    insertNetworkRequest(_data: NetworkRequest): void;
    insertNotificationEvent(_data: NotificationEvent): void;
    addPrivateView(_id: number): void;
    removePrivateView(_id: number): void;
    clearPrivateViews(): void;
    isSensitiveDataRedactionEnabled(): boolean;
    setSensitiveDataRedactionEnabled(_enabled: boolean): void;
    startNotificationsEmitter(): void;
    stopNotificationsEmitter(): void;
    showNotificationsSettings(): void;
    startUnreadChatMessagesEmitter(): void;
    stopUnreadChatMessagesEmitter(): void;
    registerUser(_options: RegisterUserOptions): void;
    updateUserId(_id: string): void;
    updateUserMetadata(_metadata: {
        [key: string]: string;
    }): void;
    unregisterUser(): void;
    setPushNotificationsToken(_token: string | null): void;
    showChatNotification(_notification: ChatNotification): void;
    setTags(_tags: string[]): void;
}
